	Spring容器的refresh()方法
1、prepareRefresh()刷新前的预处理工作
	1）initPropertySources(); 初始化一些属性设置；子类自定义个性化属性设置
		// For subclasses: do nothing by default.
	2）getEnvironment().validateRequiredProperties(); 检验属性的合法性
	3）this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>();保存容器中的一些早期的事件
2、	obtainFreshBeanFactory();	获取BeanFactory
	1）refreshBeanFactory();	刷新【创建】BeanFactory
		创建对象 构造方法中this.beanFactory = new DefaultListableBeanFactory();
		this.beanFactory.setSerializationId(getId()); 给BeanFactory设置序列化id
	2）getBeanFactory();返回GenericApplicationContext 创建的BeanFactory
	3） 将创建的BeanFactory【DefaultListableBeanFactory】返回
3、prepareBeanFactory(beanFactory);BeanFactory的预准备工作。
	1）设置BeanFactory的类加载器
		beanFactory.setBeanClassLoader(getClassLoader());
		表达式解析器
		beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));
	2）添加部分BeanPostProcessor 
		beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));	
	3）设置自动忽略的自动装配接口EnvironmentAware、EmbeddedValueResolverAware、xxxAware
		实现这些接口不会自动装配
	4）注册可以解析的自动装配 	
		beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);
		我们能在任何组件中自动注入这些：
		BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext
	5）添加BeanPostProcessor【ApplicationListenerDetector】
		beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));
	6）添加编译时的AspectJ
	7）给BeanFactory注册一些能用的组件：
		environment【ConfigurableEnvironment】、
		systemProperties【Map<String, Object>】、
		systemEnvironment【Map<String, Object>】
4、postProcessBeanFactory(beanFactory);BeanFactory准备工作完成后的后置处理工作
	1）子类通过重写这个方法来在BeanFactory创建并预准备完成后做进一步的设置
============================以上是BeanFactory创建及预准备工作=============================================
5、invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessor的方法
		BeanFactoryPostProcessor：BeanFactory的后置处理器，在BeanFactory标准初始化后执行
		两个接口BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor
	1）执行BeanFactoryPostProcessor的方法
	先执行BeanDefinitionRegistryPostProcessor的方法
		1）获取所有的BeanDefinitionRegistryPostProcessor
		2）看优先级排序，先执行实现了PriorityOrdered的postProcessBeanDefinitionRegistry()方法
			postProcessor.postProcessBeanDefinitionRegistry(registry);
		3）再执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor
		4）执行没有实现任何优先级、顺序接口的BeanDefinitionRegistryPostProcessor
	2）再执行BeanFactoryPostProcessor的方法
		1）获取所有的BeanFactoryPostProcessor
		和上面的一样  根据顺序执行
			postProcessor.postProcessBeanFactory(beanFactory);
			
6、registerBeanPostProcessors(beanFactory);	注册BeanPostProcessors
	PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this);
		
	BeanPostProcessors、
	DestructionAwareBeanPostProcessor、
	InstantiationAwareBeanPostProcessor、
		-SmartInstantiationAwareBeanPostProcessor、
	MergedBeanDefinitionPostProcessor【】
		
	1）获取所有的BeanPostProcessors；后置处理器都可以通过PriorityOrdered、Ordered来指定优先级
	String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false);
	不同接口类型的BeanPostProcessors 执行时机不同
	2）根据优先级，把beanPostProcessor放到不同的ArrayList中，
		如果是MergedBeanDefinitionPostProcessor类型的，先放到internalPostProcessors(List)中
	3）注册priorityOrderedPostProcessors中的后置处理器到BeanFactory
	4）注册orderedPostProcessors中的后置处理器到BeanFactory
	5）注册没有任何优先级接口的到BeanFactory
	6）最后再注册一遍（Re-register）internalPostProcessors中的
	7）注册一个ApplicationListenerDetector 检测器：作用是在Bean创建完成后检查Bean是否是ApplicationListener，如果是：
		applicationContext.addApplicationListener((ApplicationListener<?>) bean);
		
7、initMessageSource();	 初始化MessageSource组件：做国际化、消息绑定、消息解析
	1）获取BeanFactory
	2）判断容器中有没有id为messageSource存在，如果有赋值给this.messageSource
		如果没有自己创建一个
		  dms = new DelegatingMessageSource();
		MessageSource作用：取出国际化配置文件中的某个Key值，可以根据地区获取
	3）把MessageSource注册到容器，以后获取可以自动注入
		beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);

8、initApplicationEventMulticaster(); 初始化事件多播器 （派发器）
	1）获取BeanFactory
	2）从BeanFactory中获取id=applicationEventMulticaster，类型=ApplicationEventMulticaster的派发器
	3）如果没有创建SimpleApplicationEventMulticaster		
		this.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);
		并注册
		beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster);
		以后其他组件可以自动注入
		
9、	onRefresh();  留给子容器（子类）	
		1 子类重写这个方法，在容器刷新的时候自定义逻辑
		
10、registerListeners(); 所有ApplicationListener注册进来		
	1）拿到所有的ApplicationListeners ，getApplicationListeners()		
	2）将每个监听器添加到事件派发器中
		getApplicationEventMulticaster().addApplicationListener(listener);	
	3）派发之前产生的事件	earlyEventsToProcess(Set)
		getApplicationEventMulticaster().multicastEvent(earlyEvent);
		
11、finishBeanFactoryInitialization(beanFactory);   初始化所有剩下的单实例Bean
	1 beanFactory.preInstantiateSingletons();
		1）获取容器中的所有Bean 依次进行初始化和创建对象
		2）获取Bean的定义信息RootBeanDefinition
			RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);
		3） 判断Bean的定义bd 如果不是抽象、是单实例、不是懒加载(懒加载：用的时候才创建对象)
			1）判断是否是FactoryBean(实现FactoryBean接口)，如果是，使用FactoryBean的方法创建对象
			2）如果不是使用getBean(beanName);
				0、getBean(beanName);	ioc.getBean();
				1、doGetBean(name, null, null, false)
				2、先获取缓存中保存的单实例Bean（所有创建过的都会被缓存起来）
					Object sharedInstance = getSingleton(beanName);
					/** Cache of singleton objects: bean name --> bean instance */
					private final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(256);
				3、缓存中拿不到，开始Bean的创建对象流程
				4、标记当前Bean已经被创建（防止多线程创建不是单实例的Bean）
					markBeanAsCreated(beanName);
				5、获取Bean的定义信息
					final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);
				6、获取当前Bean依赖的其他Bean
					String[] dependsOn = mbd.getDependsOn();
					如果有通过getBean()的方式先创建这些Bean
				7、启动单实例Bean的创建流程
					1 createBean(beanName, mbd, args);
					2 Object bean = resolveBeforeInstantiation(beanName, mbdToUse);
						给BeanPostProcessor一个机会先拦截，返回代理对象
					3 触发InstantiationAwareBeanPostProcessor这种类型的方法：
						先触发postProcessBeforeInstantiation();
						如果有返回值触发applyBeanPostProcessorsAfterInitialization()
					4 创建Bean
						Object beanInstance = doCreateBean(beanName, mbdToUse, args);
						1）创建Bean实例
							instanceWrapper = createBeanInstance(beanName, mbd, args);
							使用这个方法创建实例(使用了@Bean的方式)
							instantiateUsingFactoryMethod(beanName, mbd, args);
								利用工厂方法或者通过解析构造方法等..
						2）applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
							调用MergedBeanDefinitionPostProcessor的postProcessMergedBeanDefinition()方法
						3）populateBean(beanName, mbd, instanceWrapper);【Bean属性赋值】
							====赋值之前====
							1）拿到InstantiationAwareBeanPostProcessor后置处理器
								触发postProcessAfterInstantiation()
							2）又拿到InstantiationAwareBeanPostProcessor
								触发postProcessPropertyValues()
							=====赋值之前结束，开始赋值===
							3）应用Bean的属性值，利用setter方法赋值
								applyPropertyValues(beanName, mbd, bw, pvs);
						4）initializeBean(beanName, exposedObject, mbd);【Bean初始化】
							1）【执行Aware接口的方法】invokeAwareMethods(beanName, bean);
								BeanNameAware、BeanClassLoaderAware、BeanFactoryAware
							2）【执行后置处理器初始化之前的方法】applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);	
								BeanPostProcessor.postProcessBeforeInitialization(result, beanName);
							3）【执行初始化方法】invokeInitMethods(beanName, wrappedBean, mbd);
								1)是否是 InitializingBean的实现
											执行接口规定的初始化方法
								2)是否指定自定义 init()
										 	执行指定的init()
							4）【执行后置处理器初始化之后的方法】applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);			 	
								BeanPostProcessor.postProcessAfterInitialization(result, beanName);
						5）注册Bean的销毁方法
					5 将创建的Bean天加到缓存中  singletonObjects	
						ioc容器就是这些Map，很多的Map里面保存了单实例Bean，环境信息。。
					
			3）所有Bean都利用getBean创建完成后；
				检查所有的Bean 是否是SmartInitializingSingleton如果是，执行afterSingletonsInstantiated()		

12、finishRefresh();		完成BeanFactory的初始化创建工作，IOC容器就创建完成			
	1）initLifecycleProcessor()【初始化和生命周期有关的后置处理器：LifecycleProcessor】
		从BeanFactory中找出LifecycleProcessor，写一个LifecycleProcessor的实现类，可以在相应的实际调用
			void onRefresh();void onClose();
		如果没有使用默认的new DefaultLifecycleProcessor()，加入到容器中	
	2）getLifecycleProcessor().onRefresh();
		拿到前面定义的生命周期处理器(BeanFactory) 回调onRefresh()
	3）publishEvent(new ContextRefreshedEvent(this));发布容器刷新完成事件
	4）LiveBeansView.registerApplicationContext(this);				

========总结==========
1、spring容器在启动的时候，会先保存所有注册进来的Bean的定义信息
	xml 、 @Bean、@Service .....					
2、spring会在合适的时机创建这些Bean
	1 用到这个Bean 的时候
	2 统一创建所有剩下的Bean  ---finishBeanFactoryInitialization
3、后置处理器BeanPostProcessor
	每一个Bean创建完成后，都会使用后置处理器来增强
		AnnotationAwareAspectJAutoProxyCreator：AOP创建代理对象
		AutowiredAnnotationBeanPostProcessor：处理@Autowired注解
		.....
		AsyncAnnotationBeanPostProcessor
4、时间驱动模型
	ApplicationListener: 时间监听					
	ApplicationEventMulticaster: 时间派发				
					

		
	
	